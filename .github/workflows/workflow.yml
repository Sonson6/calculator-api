name: Docker Build and Test

on: [push, pull_request]

jobs:
  build-and-push-image:
    name: Build Docker dev Image before push
    runs-on: ubuntu-latest
    env:
      PUSH_PACKAGES: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      PR_PACKAGES: ${{ github.event_name == 'pull_request' && github.ref == 'refs/heads/master' }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push dev
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/calculator-api-test:latest

    - name: Build and push main image
      uses: docker/build-push-action@v5
      if: ${{ env.PUSH_PACKAGES || PR_PACKAGES}}
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/calculator-api:latest

  run-container-pytest-checks:
    name: Pull image created from last job and run pytest/checks
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: login to docker
      run: |
        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/calculator-api-test:latest

    - name: Run unit tests in Docker container
      run: |
        docker run ${{ secrets.DOCKERHUB_USERNAME }}/calculator-api-test:latest /bin/bash -c "poe test"

    - name: Run pre-commit checks in Docker container
      run: |
        docker run ${{ secrets.DOCKERHUB_USERNAME }}/calculator-api-test /bin/bash -c "git init && git add . && poe checks"

  deploy:
    name: Deploy to Digital Ocean
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: ${{ env.PUSH_PACKAGES || PR_PACKAGES}}

    steps:
    - name: executing remote ssh commands using ssh key on digital ocean
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DIGITAL_OCEAN_HOST }}
        username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
        key: ${{ secrets.DIGITAL_OCEAN_KEY }}
        script: |
          # Login to Docker in my ssh user
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

          # Stop and remove any existing container
          docker stop fastapi_container || true && docker rm fastapi_container || true

          # Pull the latest version of the image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/calculator-api:latest

          # Run container with specific name
          docker run --name fastapi_container -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/calculator-api:latest


#  build:
#    runs-on: ubuntu-latest
#    steps:
#      -
#        name: Checkout
#        uses: actions/checkout@v4
#      -
#        name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      -
#        name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      -
#        name: Build and push
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          file: ./Dockerfile
#          push: true
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/clockbox:latest
#
